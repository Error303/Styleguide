// TODO: refactoring / streamlining needed for our grid classes

/**
 * Gridder container and box classes
 */
@mixin gridder-box($grid-columns) {
	$gridder-box-width: 100% / $grid-columns;
	$gridder-box-height: 420px;
	margin-bottom: $vert-spacing-unit;
	margin-left: auto;
	margin-right: auto;
	max-width: 450px;

	@include breakpoint($small) {
		float: left;
		height: $gridder-box-height;
		max-width: none;
		width: 50%;

		&.gridder-box-width-#{$grid-columns} {
			clear: both;
			float: none;
			width: 100%;
		}

		@for $i from 1 through 4 {
			&.gridder-box-height-#{$i} {
				height: ($gridder-box-height) * $i;
			}
		}
	}

	@include breakpoint($medium) {
		height: $gridder-box-height;
		max-width: none;
		width: $gridder-box-width;

		@for $i from 1 through 4 {
			&.gridder-box-width-#{$i} {
				width: ($gridder-box-width) * $i;
			}
		}
	}
}

@mixin gridder-parent($grid-columns) {
	$gridder-box-width: 100% / $grid-columns;
	$gridder-box-height: 420px;
	margin-bottom: 0;
	margin-left: auto;
	margin-right: auto;

	@include breakpoint($medium) {
		float: left;

		@for $i from 1 through 4 {
			&.gridder-box-height-#{$i} {
				height: ($gridder-box-height) * $i;
			}

			&.gridder-box-width-#{$i} {
				width: ($gridder-box-width) * $i;
			}
		}
	}
}

@for $grid-columns from 1 through 4 {
	$grid-gutter: $vert-spacing-unit/2;

	.gridder-container-#{$grid-columns} {
		@include breakpoint($small) {
			margin: 0 (-$grid-gutter);

			> .gridder-box, .gridder-parent {
				padding: 0 $grid-gutter;
			}
		}

		> .gridder-box {
			@include gridder-box($grid-columns);
		}

		> .gridder-parent {
			@include gridder-parent($grid-columns);
		}
	}
}

/**
 * Generic grid classes for items without a wrapper (only use when you cannot easily get a wrapper around the items e.g. views)
 */
%l-grid-item-1,
.l-grid-item-1 {
	$grid-gutter: ($vert-spacing-unit);
	padding-bottom: $grid-gutter;
	margin-bottom: $grid-gutter;
}

%l-grid-item-2,
.l-grid-item-2 {
	$grid-gutter: ($vert-spacing-unit);
	margin-bottom: $grid-gutter;

	@include breakpoint($small) {
		@include layout($gutter: 1) {
			@include float-span(8);

			&:nth-of-type(2n) {
				// omega
				@include float-span(8);
			}
		}
	}
}

%l-grid-item-3,
.l-grid-item-3 {
	$grid-gutter: ($vert-spacing-unit);
	margin-bottom: $grid-gutter;
	@include breakpoint($small) {
		@include layout($grid: 9, $gutter: 1/2) {
			@include grid-span(3);

			&:nth-of-type(3n) {
				// omega
				@include grid-span(3);
			}
		}
	}
}

%l-grid-item-4,
.l-grid-item-4 {
	$grid-gutter: ($vert-spacing-unit);
	margin-bottom: $grid-gutter;

	@include breakpoint($small) {
		@include layout($gutter: 1) {
			@include grid-span(4);

			&:nth-of-type(4n) {
				// omega
				@include grid-span(4);
			}
		}
	}
}

/**
 * Generic grid classes for a wrapper
 */
%grid-2,
.grid-2 {
	> * {
		@extend %l-grid-item-2;
	}
}

%grid-3,
.grid-3 {
	> * {
		@extend %l-grid-item-3;
	}
}


%grid-4,
.grid-4 {
	> * {
		@extend %l-grid-item-4;
	}
}
